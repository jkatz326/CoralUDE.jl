using UniversalDiffEq, DataFrames, Random 
function greet_CoralUDE()
    return "Hello CoralUDE!"
end

function testUDE()
    data,plt = LotkaVolterra();
    model = NODE(data);
    gradient_descent!(model, maxiter = 50);
    plot_predictions(model)
    plot_state_estimates(model)
end 

#Function generated by ChatGPT, can be used to make data set more sparse 
function make_sparse(data::AbstractMatrix, keep_fraction::Float64; seed::Int = 42)
    #=
    Reduces the number of data points in the dataset by randomly removing rows.
    
    Arguments:
    - data: An AbstractMatrix where each row is a data point.
    - keep_fraction: A Float64 between 0 and 1 indicating the fraction of rows to retain.
    - seed: An optional random seed for reproducibility.

    Returns:
    - A sparse version of the dataset with approximately `keep_fraction` rows retained.
    =#
    @assert 0.0 < keep_fraction <= 1.0 #keep_fraction must be between 0 and 1.
    
    # Set random seed for reproducibility
    Random.seed!(seed)

    # Generate random indices to keep
    n_rows = size(data, 1)
    n_keep = round(Int, keep_fraction * n_rows)
    keep_indices = sort(randperm(n_rows)[1:n_keep])

    # Return the sparse dataset
    return data[keep_indices, :]
end
